Progress Report:

	Project Description: Textbook Exchange

		For our project, we will be designing a database-backed textbook exchange that will simplify the textbook buying and selling processes for Duke students. The same user will have the ability to both buy and sell multiple textbooks. Textbook attributes include the class it is used for, so this way students can search a class and find out what textbooks they can get through our exchange. Currently, a Facebook page is how most students do the exchange, and books are listed by students, so comparisons have to be done manually. Our application would list all available prices for the desired books in one spot, making for a far more convenient experience.

		There are two different types of sale. The first option, buy-now, gives users a price at which they can immediately buy it. The second option is auction-style, where potential buyers make bids of increasingly high prices (like Ebay). The seller has the option to choose either approach for selling or can even use both. If using both, then bids are allowed but anyone can end the auction by meeting the buy-now price.

		For now, we have three tables created for the database, and the summary is as below (“*” represents “is part of the primary key”):

User(name, email*, phoneNumber, major);
Bid(date_time*, bid_price, bid_user_email*, book_ISBN*, book_seller_email*, book_post_time*);
Book(title, ISBN*, description, condition, professor, price, course, edition, is_auction,
is_buy_it_now, start_price, buy_it_now_price, display boolean, seller_email*, post_time*);


		Regardless of the sale type, once a buyer has been found (i.e. auction is expired or buy-now price is met) for the book, the seller will be notified and given the agreed upon price and the email of the buyer so they can discuss when/where to make the exchange. At this point our application is no longer of use to them for this particular book. 

		

		For our web interface, the main page will contain two buttons, which will direct users towards the spots for listing books and buying books (there may be intermediate searching steps for the latter).


		We will use Django for our development platform. We have not implemented step 8 yet, but we are working on getting a test database.


	Description of web interface:
		Users will come to page where they can either choose to post a book or view books that have been listed. In order to post a book a user must first register with the website. When posting a book users can choose whether to list their book as an auction or with a buy-it-now option or both. Visitors to the website must sign in order to purchase a book. When browsing for books users will be able to search for books by choosing departments and course numbers from a drop-down menu, which will then display the view for their search. When purchasing a book users will correspond with each other via email address. 
		
-------------------------------------------------------------
Till milestone 2, we have revised our ER-design seperating old tables from previous milestone into four tables:
User(email*, name, phone_Number, major);
Book(ISBN*, title, edition, author);
Bid(bid_time*, bid_price, bidder_email*, seller_email*, book_ISBN*, listing_start_time*);
Listing(start_time*, seller_email*, book_ISBN*, is_auction, is_buy_it_now, condition, description, 
start_price, buy_it_now_price, title, current_bid)

We also further modified our triggers for the databases, where the detailed SQL codes are available in a seperate file:
# Triggers:
#   1. Once a new record is inserted to table Listing, if it is auction, check current bid = start bid
#   if current bid is NULL or current bid != start bid, let current bid = start bid

#   2. When a new record is inserted to bid, check bid_price >= current bid + 0.01. If not, throw an error; 
#   If yes, update the current bid for the same listing in Listing table with the new high bid.

#   3. ALso, need to check new bid's listing is auction
#   4. When a new bid is inserted, the listing with buy_it_now = 1 should turn is_buy_it_now = 0

#   5. At first all users' information is invisible to other users. For example, a potential buyer cannot see any seller's information
#   we can make sellers' email address partially visible so the buyers know who post each listing. 

#   6. When the window period of 7 days for each listing has passed, delete it from the VIEW. Also,
#   if possible, send the seller an email notifying his listing has been ended (THIS FEATURE IS NOT INCLUDED IN TRIGGER)
#   Also, when the listing is ended, if the type is auction and there is at least one bid, then send an email to the seller
#   notifying him the highest bid and highest bidder's name, phone number, email and major. Also, 
#   Send the highest bidder an email notifying the seller's contact info. (THIS FEATURE IS NOT INCLUDED IN TRIGGER).

#   7. (TRIGGER NOT CREATED) Give the seller an option (on the website) of ending a listing. Once the listing is 
#   ended by the seller then deleted it from the VIEW (Which can be controlled by view definition)

#   8. (TRIGGER NOT CREATED) Give the seller an option (on the website) of relisting a listing. Once the listing
#   relisted then create a new record wit heverything the same except for set current_bid and start_time.

#   9. (TRIGGER NOT CREATED) For a listing with biy_it_now option, once a buyer has clicked Buy_it_now, then the listing will
#   be ended immediately (delete it from the VIEW), and send the seller an email notifying the seller the buyer's all
#   contact information. Send the buyer an email notifying the seller's contact info.
#   10. Check expiration periodically.
#   11, Tianyi: delete status and create a view to display.
#   12. No need to send real message, just demo, talk to machine.

In addition, we have scrape about 1,000 records of sample data (500-1000 records for each table) for our website development
test. We've also tested our new databases and triggers by inserting a small portion of the data to the databases.
All the current bugs have been fixed by doing so. Further modification is expected.
